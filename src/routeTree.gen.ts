/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ArtistRouteImport } from './routes/artist/route'
import { Route as IndexImport } from './routes/index'
import { Route as TestIndexImport } from './routes/test/index'
import { Route as GenreIndexImport } from './routes/genre/index'
import { Route as ArtistIndexImport } from './routes/artist/index'
import { Route as ArtistNewImport } from './routes/artist/new'
import { Route as ArtistIdImport } from './routes/artist/$id'

// Create/Update Routes

const ArtistRouteRoute = ArtistRouteImport.update({
  id: '/artist',
  path: '/artist',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TestIndexRoute = TestIndexImport.update({
  id: '/test/',
  path: '/test/',
  getParentRoute: () => rootRoute,
} as any)

const GenreIndexRoute = GenreIndexImport.update({
  id: '/genre/',
  path: '/genre/',
  getParentRoute: () => rootRoute,
} as any)

const ArtistIndexRoute = ArtistIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ArtistRouteRoute,
} as any)

const ArtistNewRoute = ArtistNewImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => ArtistRouteRoute,
} as any)

const ArtistIdRoute = ArtistIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => ArtistRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/artist': {
      id: '/artist'
      path: '/artist'
      fullPath: '/artist'
      preLoaderRoute: typeof ArtistRouteImport
      parentRoute: typeof rootRoute
    }
    '/artist/$id': {
      id: '/artist/$id'
      path: '/$id'
      fullPath: '/artist/$id'
      preLoaderRoute: typeof ArtistIdImport
      parentRoute: typeof ArtistRouteImport
    }
    '/artist/new': {
      id: '/artist/new'
      path: '/new'
      fullPath: '/artist/new'
      preLoaderRoute: typeof ArtistNewImport
      parentRoute: typeof ArtistRouteImport
    }
    '/artist/': {
      id: '/artist/'
      path: '/'
      fullPath: '/artist/'
      preLoaderRoute: typeof ArtistIndexImport
      parentRoute: typeof ArtistRouteImport
    }
    '/genre/': {
      id: '/genre/'
      path: '/genre'
      fullPath: '/genre'
      preLoaderRoute: typeof GenreIndexImport
      parentRoute: typeof rootRoute
    }
    '/test/': {
      id: '/test/'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface ArtistRouteRouteChildren {
  ArtistIdRoute: typeof ArtistIdRoute
  ArtistNewRoute: typeof ArtistNewRoute
  ArtistIndexRoute: typeof ArtistIndexRoute
}

const ArtistRouteRouteChildren: ArtistRouteRouteChildren = {
  ArtistIdRoute: ArtistIdRoute,
  ArtistNewRoute: ArtistNewRoute,
  ArtistIndexRoute: ArtistIndexRoute,
}

const ArtistRouteRouteWithChildren = ArtistRouteRoute._addFileChildren(
  ArtistRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/artist': typeof ArtistRouteRouteWithChildren
  '/artist/$id': typeof ArtistIdRoute
  '/artist/new': typeof ArtistNewRoute
  '/artist/': typeof ArtistIndexRoute
  '/genre': typeof GenreIndexRoute
  '/test': typeof TestIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/artist/$id': typeof ArtistIdRoute
  '/artist/new': typeof ArtistNewRoute
  '/artist': typeof ArtistIndexRoute
  '/genre': typeof GenreIndexRoute
  '/test': typeof TestIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/artist': typeof ArtistRouteRouteWithChildren
  '/artist/$id': typeof ArtistIdRoute
  '/artist/new': typeof ArtistNewRoute
  '/artist/': typeof ArtistIndexRoute
  '/genre/': typeof GenreIndexRoute
  '/test/': typeof TestIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/artist'
    | '/artist/$id'
    | '/artist/new'
    | '/artist/'
    | '/genre'
    | '/test'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/artist/$id' | '/artist/new' | '/artist' | '/genre' | '/test'
  id:
    | '__root__'
    | '/'
    | '/artist'
    | '/artist/$id'
    | '/artist/new'
    | '/artist/'
    | '/genre/'
    | '/test/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ArtistRouteRoute: typeof ArtistRouteRouteWithChildren
  GenreIndexRoute: typeof GenreIndexRoute
  TestIndexRoute: typeof TestIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ArtistRouteRoute: ArtistRouteRouteWithChildren,
  GenreIndexRoute: GenreIndexRoute,
  TestIndexRoute: TestIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/artist",
        "/genre/",
        "/test/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/artist": {
      "filePath": "artist/route.tsx",
      "children": [
        "/artist/$id",
        "/artist/new",
        "/artist/"
      ]
    },
    "/artist/$id": {
      "filePath": "artist/$id.tsx",
      "parent": "/artist"
    },
    "/artist/new": {
      "filePath": "artist/new.tsx",
      "parent": "/artist"
    },
    "/artist/": {
      "filePath": "artist/index.tsx",
      "parent": "/artist"
    },
    "/genre/": {
      "filePath": "genre/index.tsx"
    },
    "/test/": {
      "filePath": "test/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */

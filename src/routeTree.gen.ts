/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ArtistRouteImport } from './routes/artist/route'
import { Route as IndexImport } from './routes/index'
import { Route as TestIndexImport } from './routes/test/index'
import { Route as ArtistIndexImport } from './routes/artist/index'
import { Route as ArtistNewImport } from './routes/artist/new'
import { Route as ArtistIdRouteImport } from './routes/artist/$id/route'
import { Route as ArtistIdIndexImport } from './routes/artist/$id/index'
import { Route as ArtistIdUpdateImport } from './routes/artist/$id/update'
import { Route as ArtistIdDeleteImport } from './routes/artist/$id/delete'

// Create/Update Routes

const ArtistRouteRoute = ArtistRouteImport.update({
  id: '/artist',
  path: '/artist',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TestIndexRoute = TestIndexImport.update({
  id: '/test/',
  path: '/test/',
  getParentRoute: () => rootRoute,
} as any)

const ArtistIndexRoute = ArtistIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ArtistRouteRoute,
} as any)

const ArtistNewRoute = ArtistNewImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => ArtistRouteRoute,
} as any)

const ArtistIdRouteRoute = ArtistIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => ArtistRouteRoute,
} as any)

const ArtistIdIndexRoute = ArtistIdIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ArtistIdRouteRoute,
} as any)

const ArtistIdUpdateRoute = ArtistIdUpdateImport.update({
  id: '/update',
  path: '/update',
  getParentRoute: () => ArtistIdRouteRoute,
} as any)

const ArtistIdDeleteRoute = ArtistIdDeleteImport.update({
  id: '/delete',
  path: '/delete',
  getParentRoute: () => ArtistIdRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/artist': {
      id: '/artist'
      path: '/artist'
      fullPath: '/artist'
      preLoaderRoute: typeof ArtistRouteImport
      parentRoute: typeof rootRoute
    }
    '/artist/$id': {
      id: '/artist/$id'
      path: '/$id'
      fullPath: '/artist/$id'
      preLoaderRoute: typeof ArtistIdRouteImport
      parentRoute: typeof ArtistRouteImport
    }
    '/artist/new': {
      id: '/artist/new'
      path: '/new'
      fullPath: '/artist/new'
      preLoaderRoute: typeof ArtistNewImport
      parentRoute: typeof ArtistRouteImport
    }
    '/artist/': {
      id: '/artist/'
      path: '/'
      fullPath: '/artist/'
      preLoaderRoute: typeof ArtistIndexImport
      parentRoute: typeof ArtistRouteImport
    }
    '/test/': {
      id: '/test/'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestIndexImport
      parentRoute: typeof rootRoute
    }
    '/artist/$id/delete': {
      id: '/artist/$id/delete'
      path: '/delete'
      fullPath: '/artist/$id/delete'
      preLoaderRoute: typeof ArtistIdDeleteImport
      parentRoute: typeof ArtistIdRouteImport
    }
    '/artist/$id/update': {
      id: '/artist/$id/update'
      path: '/update'
      fullPath: '/artist/$id/update'
      preLoaderRoute: typeof ArtistIdUpdateImport
      parentRoute: typeof ArtistIdRouteImport
    }
    '/artist/$id/': {
      id: '/artist/$id/'
      path: '/'
      fullPath: '/artist/$id/'
      preLoaderRoute: typeof ArtistIdIndexImport
      parentRoute: typeof ArtistIdRouteImport
    }
  }
}

// Create and export the route tree

interface ArtistIdRouteRouteChildren {
  ArtistIdDeleteRoute: typeof ArtistIdDeleteRoute
  ArtistIdUpdateRoute: typeof ArtistIdUpdateRoute
  ArtistIdIndexRoute: typeof ArtistIdIndexRoute
}

const ArtistIdRouteRouteChildren: ArtistIdRouteRouteChildren = {
  ArtistIdDeleteRoute: ArtistIdDeleteRoute,
  ArtistIdUpdateRoute: ArtistIdUpdateRoute,
  ArtistIdIndexRoute: ArtistIdIndexRoute,
}

const ArtistIdRouteRouteWithChildren = ArtistIdRouteRoute._addFileChildren(
  ArtistIdRouteRouteChildren,
)

interface ArtistRouteRouteChildren {
  ArtistIdRouteRoute: typeof ArtistIdRouteRouteWithChildren
  ArtistNewRoute: typeof ArtistNewRoute
  ArtistIndexRoute: typeof ArtistIndexRoute
}

const ArtistRouteRouteChildren: ArtistRouteRouteChildren = {
  ArtistIdRouteRoute: ArtistIdRouteRouteWithChildren,
  ArtistNewRoute: ArtistNewRoute,
  ArtistIndexRoute: ArtistIndexRoute,
}

const ArtistRouteRouteWithChildren = ArtistRouteRoute._addFileChildren(
  ArtistRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/artist': typeof ArtistRouteRouteWithChildren
  '/artist/$id': typeof ArtistIdRouteRouteWithChildren
  '/artist/new': typeof ArtistNewRoute
  '/artist/': typeof ArtistIndexRoute
  '/test': typeof TestIndexRoute
  '/artist/$id/delete': typeof ArtistIdDeleteRoute
  '/artist/$id/update': typeof ArtistIdUpdateRoute
  '/artist/$id/': typeof ArtistIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/artist/new': typeof ArtistNewRoute
  '/artist': typeof ArtistIndexRoute
  '/test': typeof TestIndexRoute
  '/artist/$id/delete': typeof ArtistIdDeleteRoute
  '/artist/$id/update': typeof ArtistIdUpdateRoute
  '/artist/$id': typeof ArtistIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/artist': typeof ArtistRouteRouteWithChildren
  '/artist/$id': typeof ArtistIdRouteRouteWithChildren
  '/artist/new': typeof ArtistNewRoute
  '/artist/': typeof ArtistIndexRoute
  '/test/': typeof TestIndexRoute
  '/artist/$id/delete': typeof ArtistIdDeleteRoute
  '/artist/$id/update': typeof ArtistIdUpdateRoute
  '/artist/$id/': typeof ArtistIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/artist'
    | '/artist/$id'
    | '/artist/new'
    | '/artist/'
    | '/test'
    | '/artist/$id/delete'
    | '/artist/$id/update'
    | '/artist/$id/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/artist/new'
    | '/artist'
    | '/test'
    | '/artist/$id/delete'
    | '/artist/$id/update'
    | '/artist/$id'
  id:
    | '__root__'
    | '/'
    | '/artist'
    | '/artist/$id'
    | '/artist/new'
    | '/artist/'
    | '/test/'
    | '/artist/$id/delete'
    | '/artist/$id/update'
    | '/artist/$id/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ArtistRouteRoute: typeof ArtistRouteRouteWithChildren
  TestIndexRoute: typeof TestIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ArtistRouteRoute: ArtistRouteRouteWithChildren,
  TestIndexRoute: TestIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/artist",
        "/test/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/artist": {
      "filePath": "artist/route.tsx",
      "children": [
        "/artist/$id",
        "/artist/new",
        "/artist/"
      ]
    },
    "/artist/$id": {
      "filePath": "artist/$id/route.tsx",
      "parent": "/artist",
      "children": [
        "/artist/$id/delete",
        "/artist/$id/update",
        "/artist/$id/"
      ]
    },
    "/artist/new": {
      "filePath": "artist/new.tsx",
      "parent": "/artist"
    },
    "/artist/": {
      "filePath": "artist/index.tsx",
      "parent": "/artist"
    },
    "/test/": {
      "filePath": "test/index.tsx"
    },
    "/artist/$id/delete": {
      "filePath": "artist/$id/delete.tsx",
      "parent": "/artist/$id"
    },
    "/artist/$id/update": {
      "filePath": "artist/$id/update.tsx",
      "parent": "/artist/$id"
    },
    "/artist/$id/": {
      "filePath": "artist/$id/index.tsx",
      "parent": "/artist/$id"
    }
  }
}
ROUTE_MANIFEST_END */
